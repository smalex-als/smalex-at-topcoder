package p400.srm492;

import utils.ExampleRunner;

/**
 * Created by IntelliJ IDEA.
 * User: smalex
 * Date: 03.04.11
 * Time: 19:34
 */
public class TimeTravellingCellar {
  public int determineProfit(int[] profit, int[] decay) {
    int max = 0;
    for (int i = 0; i < profit.length; i++) {
      for (int j = 0; j < decay.length; j++) {
        if (i != j) {
          max = Math.max(max, profit[i] - decay[j]);
        }
      }
    }
    return max;
  }

  public static void main(String[] args) {
    ExampleRunner.eq(1, 2, new TimeTravellingCellar().determineProfit(new int[]{1, 2, 3}, new int[]{3, 1, 2}));
    ExampleRunner.eq(2, 1, new TimeTravellingCellar().determineProfit(new int[]{3, 2}, new int[]{1, 2}));
    ExampleRunner.eq(3, 5431, new TimeTravellingCellar().determineProfit(new int[]{50, 5743, 2919, 483, 382, 5583}, new int[]{2823, 3479, 9955, 312, 3838, 402}));
    ExampleRunner.eq(4, 2, new TimeTravellingCellar().determineProfit(new int[]{3, 3, 3}, new int[]{1, 1, 1}));
    ExampleRunner.eq(5, 9999, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{1, 1}));
    ExampleRunner.eq(6, 6580, new TimeTravellingCellar().determineProfit(new int[]{7116, 8936}, new int[]{9309, 536}));
    ExampleRunner.eq(7, 6944, new TimeTravellingCellar().determineProfit(new int[]{8241, 4702}, new int[]{5650, 1297}));
    ExampleRunner.eq(8, 8943, new TimeTravellingCellar().determineProfit(new int[]{4654, 9352, 3621}, new int[]{8188, 4149, 409}));
    ExampleRunner.eq(9, 8372, new TimeTravellingCellar().determineProfit(new int[]{5788, 7193, 3373, 8546}, new int[]{3535, 1508, 174, 8701}));
    ExampleRunner.eq(10, 6960, new TimeTravellingCellar().determineProfit(new int[]{4458, 4809, 5567, 8710, 4539}, new int[]{6103, 1750, 2095, 4619, 8865}));
    ExampleRunner.eq(11, 8744, new TimeTravellingCellar().determineProfit(new int[]{1030, 279, 9400, 9270, 1333, 1401, 6918, 5986}, new int[]{7104, 6890, 526, 1252, 3651, 6313, 8445, 7023}));
    ExampleRunner.eq(12, 7973, new TimeTravellingCellar().determineProfit(new int[]{1210, 1979, 4882, 7736, 680, 9340, 2544, 6246, 4401, 7082, 8700, 6151, 5528}, new int[]{3318, 1367, 2909, 3597, 7119, 8531, 4929, 8519, 1800, 7266, 5623, 8690, 7791}));
    ExampleRunner.eq(13, 9490, new TimeTravellingCellar().determineProfit(new int[]{3226, 8692, 4103, 1670, 5714, 1665, 1, 6948, 9400, 7032, 2639, 8295, 9629, 3391, 5377, 8328, 5893, 7256, 1646, 7260, 165}, new int[]{1594, 730, 5047, 2874, 9248, 6846, 139, 1222, 1887, 7930, 800, 578, 8384, 8821, 2644, 6400, 8821, 9591, 5799, 2204, 8581}));
    ExampleRunner.eq(14, 9031, new TimeTravellingCellar().determineProfit(new int[]{4094, 1832, 1971, 5822, 160, 7864, 9429, 8157, 1475, 9593, 6102, 2204, 991, 5327, 7803, 7837, 5465, 5377, 9723, 9746, 6176, 301, 4482, 4996, 2944, 881, 169, 8886, 3032, 2372, 7466, 3477, 4204, 5788}, new int[]{9298, 715, 3651, 8726, 5223, 5125, 4671, 7676, 3680, 2013, 3002, 1483, 9849, 4818, 6859, 5924, 916, 3034, 2576, 5397, 4381, 1871, 2629, 4549, 756, 5660, 6921, 4573, 5488, 7476, 6712, 4785, 4542, 6715}));
    ExampleRunner.eq(15, 9587, new TimeTravellingCellar().determineProfit(new int[]{9863, 6116, 1839, 885, 3791, 5519, 2897, 6792, 3353, 9098, 1609, 211, 5021, 2524, 3244, 7596, 4272, 7624, 9466, 3253, 8525, 6573, 5264, 1797, 7497, 752, 5624, 4208, 1888, 165, 922, 1750, 6280, 9113, 8986, 6422, 983, 1883, 9565, 4335, 980, 7525, 897, 2352, 6401, 4140, 6299}, new int[]{672, 8115, 2116, 276, 2991, 8688, 5540, 4787, 2536, 6291, 410, 6743, 8178, 6926, 4017, 6280, 9557, 9481, 5265, 5978, 463, 3499, 5542, 1149, 4478, 9419, 2045, 3181, 5819, 2536, 9479, 6490, 7002, 1594, 6766, 9993, 6633, 8657, 1131, 9168, 4947, 1541, 2263, 9476, 4818, 6279, 5755}));
    ExampleRunner.eq(16, 9736, new TimeTravellingCellar().determineProfit(new int[]{4375, 2111, 7372, 6704, 8925, 870, 8598, 6425, 1700, 8016, 8469, 4880, 3834, 7356, 4359, 6675, 4357, 5952, 3440, 701, 2585, 8448, 1832, 8104, 9746, 9724, 366, 9222, 4541, 2996, 1328, 8915, 1458, 8699, 1971, 382, 5921, 568, 6806, 7620, 8583, 1626, 2499, 2416, 8981, 6857, 9090, 9690, 9161, 8882}, new int[]{390, 8097, 7329, 8573, 2552, 7075, 8296, 2918, 2648, 9189, 2265, 3975, 8103, 3723, 9026, 73, 4104, 4946, 640, 7262, 2565, 5574, 8887, 1415, 7989, 7868, 8272, 7079, 7557, 3784, 5960, 4298, 8232, 9640, 2871, 783, 6714, 7518, 52, 9361, 6706, 2317, 9688, 1161, 2391, 5065, 7585, 6494, 10, 4577}));
    ExampleRunner.eq(17, 9208, new TimeTravellingCellar().determineProfit(new int[]{3755, 8926, 150, 8994, 340, 8139, 6861, 4963, 5217, 769, 5098, 7528, 1418, 3329, 7167, 4288, 4112, 233, 8158, 4163, 9593, 4863, 2831, 5632, 6023, 5221, 696, 3608, 8067, 7057, 4536, 8173, 2334, 4685, 7166, 9026, 2823, 378, 3988, 4391, 1146, 5438, 8270, 2564, 8766, 5437, 3203, 9229, 5669, 1360}, new int[]{9744, 1613, 2575, 2574, 3597, 8597, 4147, 644, 8556, 2213, 7701, 3091, 385, 6386, 7776, 3903, 5411, 6950, 4280, 5751, 7693, 1778, 1188, 5962, 693, 6305, 1398, 3895, 5534, 3418, 1607, 1629, 5031, 4181, 554, 4979, 9129, 4700, 5622, 4037, 3264, 3322, 3479, 3649, 6060, 1254, 3903, 1470, 4556, 8182}));
    ExampleRunner.eq(18, 2250, new TimeTravellingCellar().determineProfit(new int[]{8209, 651}, new int[]{4712, 5959}));
    ExampleRunner.eq(19, 6521, new TimeTravellingCellar().determineProfit(new int[]{8904, 3093}, new int[]{1031, 2383}));
    ExampleRunner.eq(20, 5076, new TimeTravellingCellar().determineProfit(new int[]{3093, 3442, 9988}, new int[]{6995, 4912, 895}));
    ExampleRunner.eq(21, 4794, new TimeTravellingCellar().determineProfit(new int[]{3661, 5739, 901, 9388}, new int[]{4594, 5477, 6498, 3981}));
    ExampleRunner.eq(22, 6010, new TimeTravellingCellar().determineProfit(new int[]{606, 8585, 8848, 435, 6294}, new int[]{4104, 9880, 7325, 2838, 2972}));
    ExampleRunner.eq(23, 9040, new TimeTravellingCellar().determineProfit(new int[]{7118, 2825, 9967, 2029, 3720, 1495, 512, 3213}, new int[]{9333, 3753, 915, 7822, 8057, 927, 3560, 8957}));
    ExampleRunner.eq(24, 8134, new TimeTravellingCellar().determineProfit(new int[]{6667, 4505, 4433, 3164, 8485, 5038, 1748, 3685, 1825, 8042, 4140, 1704, 1718}, new int[]{6977, 4675, 8835, 6153, 993, 864, 9872, 8839, 7727, 9437, 8172, 1479, 351}));
    ExampleRunner.eq(25, 9244, new TimeTravellingCellar().determineProfit(new int[]{5993, 9535, 7630, 5905, 4843, 4296, 409, 9275, 7459, 5246, 664, 5558, 5282, 8840, 3599, 9421, 543, 5316, 6397, 1570, 503}, new int[]{2549, 8914, 7718, 8773, 7753, 5444, 8209, 5924, 3274, 4911, 8268, 2808, 8892, 4172, 7650, 3187, 4581, 3276, 6997, 9826, 291}));
    ExampleRunner.eq(26, 8866, new TimeTravellingCellar().determineProfit(new int[]{2555, 1459, 9131, 2505, 879, 6025, 4173, 3627, 7594, 4675, 6175, 6508, 8744, 1299, 612, 4187, 5859, 6535, 7460, 770, 4802, 6619, 9661, 5326, 4268, 9200, 6258, 3895, 6196, 2435, 4185, 5102, 3893, 3315}, new int[]{7607, 4771, 5692, 8131, 8397, 3285, 9157, 923, 6144, 7900, 8574, 6755, 2086, 4432, 9641, 5897, 5201, 795, 2515, 1214, 6120, 3134, 413, 2377, 7028, 6608, 4811, 1212, 8062, 5055, 879, 2020, 9825, 6570}));
    ExampleRunner.eq(27, 9440, new TimeTravellingCellar().determineProfit(new int[]{150, 4573, 6206, 9306, 5495, 8702, 3557, 4068, 1808, 1994, 8500, 7801, 7890, 52, 8595, 404, 1265, 1066, 9889, 1677, 9794, 6916, 4637, 956, 4479, 9050, 6010, 1709, 1069, 5834, 4630, 7570, 406, 7188, 3227, 2252, 5889, 6783, 2672, 4048, 8776, 7523, 1848, 6665, 7574, 442, 3420}, new int[]{8839, 1507, 3308, 6867, 7652, 6575, 7855, 8607, 1053, 6904, 4616, 2762, 7972, 449, 3743, 5541, 7206, 930, 5119, 5810, 3170, 1901, 8481, 7218, 7028, 6003, 9065, 3692, 9928, 5859, 3463, 5118, 3717, 3122, 1985, 1369, 9696, 6191, 9975, 749, 3095, 4591, 9862, 7418, 5039, 9956, 9311}));
    ExampleRunner.eq(28, 9782, new TimeTravellingCellar().determineProfit(new int[]{8597, 886, 4429, 4406, 4055, 6330, 9238, 1272, 9709, 5240, 6689, 3401, 1519, 2547, 3215, 6637, 6263, 6337, 4973, 7631, 6032, 1163, 7606, 3132, 609, 8548, 9345, 8027, 3586, 9301, 7337, 8534, 6538, 1765, 9291, 592, 4446, 8528, 8216, 4155, 3767, 4904, 3907, 1638, 3802, 7121, 8274, 64, 9809, 9598}, new int[]{4047, 2193, 760, 8004, 1676, 1369, 6551, 1021, 5747, 6488, 6673, 3083, 5022, 3210, 1199, 4312, 153, 5645, 2840, 4720, 6151, 2958, 5975, 57, 947, 9776, 3529, 9220, 6192, 9690, 8817, 238, 1882, 5929, 4593, 3557, 3649, 1143, 929, 9395, 7630, 7601, 8829, 9003, 7162, 27, 3315, 7315, 2023, 2506}));
    ExampleRunner.eq(29, 9762, new TimeTravellingCellar().determineProfit(new int[]{8386, 8173, 1815, 4361, 4581, 2762, 4136, 4462, 8333, 6679, 503, 3502, 3268, 2384, 9430, 7860, 2292, 9430, 9002, 9573, 5176, 2984, 7173, 4004, 1986, 687, 382, 1652, 4353, 2405, 509, 2738, 6929, 2324, 7098, 1510, 1437, 7586, 2323, 9769, 4264, 2825, 9622, 7532, 1560, 9051, 1743, 3851, 4832, 745}, new int[]{9775, 7, 80, 6948, 362, 2065, 3986, 744, 3717, 8338, 3148, 577, 1075, 6428, 2900, 8173, 7937, 688, 2110, 259, 6809, 6373, 9435, 6430, 256, 994, 1833, 1999, 1197, 6664, 2743, 971, 3023, 2822, 4270, 3384, 1238, 8255, 479, 1306, 2944, 9978, 1883, 4019, 6406, 1134, 8543, 694, 1822, 652}));
    ExampleRunner.eq(30, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 2}, new int[]{1, 2}));
    ExampleRunner.eq(31, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2}, new int[]{1, 1}));
    ExampleRunner.eq(32, 5, new TimeTravellingCellar().determineProfit(new int[]{6, 8}, new int[]{3, 5}));
    ExampleRunner.eq(33, 1, new TimeTravellingCellar().determineProfit(new int[]{6, 4}, new int[]{3, 8}));
    ExampleRunner.eq(34, 132, new TimeTravellingCellar().determineProfit(new int[]{292, 116}, new int[]{332, 160}));
    ExampleRunner.eq(35, 18, new TimeTravellingCellar().determineProfit(new int[]{148, 400}, new int[]{382, 242}));
    ExampleRunner.eq(36, 239, new TimeTravellingCellar().determineProfit(new int[]{645, 564}, new int[]{325, 431}));
    ExampleRunner.eq(37, 693, new TimeTravellingCellar().determineProfit(new int[]{966, 54}, new int[]{879, 273}));
    ExampleRunner.eq(38, 1555, new TimeTravellingCellar().determineProfit(new int[]{2651, 2153}, new int[]{598, 3900}));
    ExampleRunner.eq(39, 677, new TimeTravellingCellar().determineProfit(new int[]{3949, 3618}, new int[]{4948, 3272}));
    ExampleRunner.eq(40, 76, new TimeTravellingCellar().determineProfit(new int[]{1210, 1301}, new int[]{1262, 1134}));
    ExampleRunner.eq(41, 194, new TimeTravellingCellar().determineProfit(new int[]{1235, 1235}, new int[]{1340, 1041}));
    ExampleRunner.eq(42, 22, new TimeTravellingCellar().determineProfit(new int[]{5046, 5019}, new int[]{5047, 5024}));
    ExampleRunner.eq(43, 11, new TimeTravellingCellar().determineProfit(new int[]{5007, 5028}, new int[]{5017, 5042}));
    ExampleRunner.eq(44, 309, new TimeTravellingCellar().determineProfit(new int[]{9755, 9874}, new int[]{9565, 9968}));
    ExampleRunner.eq(45, 62, new TimeTravellingCellar().determineProfit(new int[]{9090, 9260}, new int[]{9850, 9028}));
    ExampleRunner.eq(46, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 2}, new int[]{1, 2}));
    ExampleRunner.eq(47, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 1}, new int[]{2, 1}));
    ExampleRunner.eq(48, 1, new TimeTravellingCellar().determineProfit(new int[]{9999, 10000}, new int[]{9999, 10000}));
    ExampleRunner.eq(49, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{10000, 9999}));
    ExampleRunner.eq(50, 16, new TimeTravellingCellar().determineProfit(new int[]{22, 1}, new int[]{11, 6}));
    ExampleRunner.eq(51, 35, new TimeTravellingCellar().determineProfit(new int[]{44, 37}, new int[]{33, 9}));
    ExampleRunner.eq(52, 4, new TimeTravellingCellar().determineProfit(new int[]{10, 1}, new int[]{3, 6}));
    ExampleRunner.eq(53, 6, new TimeTravellingCellar().determineProfit(new int[]{8, 2}, new int[]{9, 2}));
    ExampleRunner.eq(54, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 1, 2, 1, 2, 2, 1, 1, 1, 1}, new int[]{2, 2, 1, 1, 2, 1, 2, 2, 2, 1}));
    ExampleRunner.eq(55, 7, new TimeTravellingCellar().determineProfit(new int[]{10, 2, 8, 8, 4, 7, 4, 7, 6, 10}, new int[]{6, 3, 6, 4, 4, 10, 9, 3, 3, 7}));
    ExampleRunner.eq(56, 373, new TimeTravellingCellar().determineProfit(new int[]{326, 106, 31, 263, 379, 86, 239, 158, 150, 324}, new int[]{128, 14, 286, 6, 234, 214, 73, 225, 364, 185}));
    ExampleRunner.eq(57, 327, new TimeTravellingCellar().determineProfit(new int[]{315, 294, 211, 362, 350, 339, 47, 248, 338, 165}, new int[]{127, 264, 267, 154, 322, 45, 35, 160, 198, 180}));
    ExampleRunner.eq(58, 833, new TimeTravellingCellar().determineProfit(new int[]{309, 228, 587, 900, 306, 1027, 119, 672, 125, 518}, new int[]{983, 810, 365, 877, 690, 618, 472, 674, 194, 328}));
    ExampleRunner.eq(59, 950, new TimeTravellingCellar().determineProfit(new int[]{213, 828, 829, 437, 971, 944, 594, 623, 553, 418}, new int[]{353, 798, 582, 930, 668, 824, 927, 723, 465, 21}));
    ExampleRunner.eq(60, 4577, new TimeTravellingCellar().determineProfit(new int[]{4909, 2533, 504, 1114, 1160, 3526, 1509, 4626, 3810, 3258}, new int[]{488, 371, 2320, 2793, 3595, 1758, 332, 1439, 4833, 3010}));
    ExampleRunner.eq(61, 3393, new TimeTravellingCellar().determineProfit(new int[]{181, 3398, 4219, 1087, 658, 4582, 1890, 4865, 4469, 4117}, new int[]{1508, 4377, 1650, 4137, 2715, 2710, 2663, 4125, 2335, 1472}));
    ExampleRunner.eq(62, 336, new TimeTravellingCellar().determineProfit(new int[]{1036, 1015, 1352, 1153, 1161, 1054, 1231, 1385, 1120, 1166}, new int[]{1189, 1495, 1497, 1068, 1230, 1049, 1258, 1494, 1427, 1447}));
    ExampleRunner.eq(63, 409, new TimeTravellingCellar().determineProfit(new int[]{1000, 1294, 1263, 1459, 1283, 1180, 1202, 1166, 1408, 1139}, new int[]{1279, 1445, 1154, 1130, 1097, 1316, 1431, 1328, 1447, 1050}));
    ExampleRunner.eq(64, 41, new TimeTravellingCellar().determineProfit(new int[]{5004, 5033, 5032, 5012, 5017, 5011, 5043, 5035, 5041, 5046}, new int[]{5006, 5015, 5016, 5030, 5027, 5005, 5042, 5023, 5010, 5038}));
    ExampleRunner.eq(65, 44, new TimeTravellingCellar().determineProfit(new int[]{5027, 5020, 5003, 5024, 5035, 5038, 5020, 5007, 5015, 5044}, new int[]{5011, 5022, 5050, 5024, 5040, 5035, 5041, 5049, 5000, 5036}));
    ExampleRunner.eq(66, 891, new TimeTravellingCellar().determineProfit(new int[]{9628, 9364, 9290, 9949, 9649, 9036, 9508, 9815, 9420, 9738}, new int[]{9766, 9261, 9058, 9310, 9583, 9675, 9469, 9768, 9762, 9642}));
    ExampleRunner.eq(67, 847, new TimeTravellingCellar().determineProfit(new int[]{9199, 9639, 9341, 9914, 9030, 9945, 9403, 9744, 9169, 9114}, new int[]{9331, 9797, 9478, 9974, 9098, 9479, 9362, 9959, 9294, 9782}));
    ExampleRunner.eq(68, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 1, 2, 2, 2, 2, 2, 1, 2, 2}, new int[]{1, 1, 1, 2, 1, 2, 2, 2, 2, 1}));
    ExampleRunner.eq(69, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 9999, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 9999}, new int[]{9999, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 9999}));
    ExampleRunner.eq(70, 43, new TimeTravellingCellar().determineProfit(new int[]{40, 14, 47, 26, 46, 13, 43, 23, 35, 6}, new int[]{21, 18, 3, 34, 23, 11, 28, 8, 24, 22}));
    ExampleRunner.eq(71, 31, new TimeTravellingCellar().determineProfit(new int[]{38, 30, 4, 33, 24, 29, 27, 13, 45, 23}, new int[]{39, 40, 38, 33, 14, 22, 41, 34, 39, 43}));
    ExampleRunner.eq(72, 9, new TimeTravellingCellar().determineProfit(new int[]{1, 3, 7, 2, 4, 10, 9, 8, 5, 6}, new int[]{1, 5, 9, 3, 7, 6, 2, 10, 4, 8}));
    ExampleRunner.eq(73, 9, new TimeTravellingCellar().determineProfit(new int[]{3, 1, 5, 3, 3, 8, 5, 4, 10, 4}, new int[]{8, 7, 6, 4, 9, 6, 4, 1, 3, 1}));
    ExampleRunner.eq(74, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2}, new int[]{1, 1, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1}));
    ExampleRunner.eq(75, 8, new TimeTravellingCellar().determineProfit(new int[]{5, 5, 2, 9, 2, 4, 8, 5, 5, 10, 5, 6, 10, 7, 9, 3, 6, 6, 2, 8, 9, 8, 4, 4, 3}, new int[]{10, 6, 4, 2, 6, 4, 5, 9, 4, 4, 10, 6, 8, 2, 9, 5, 3, 2, 5, 9, 7, 6, 4, 2, 6}));
    ExampleRunner.eq(76, 344, new TimeTravellingCellar().determineProfit(new int[]{174, 38, 383, 176, 337, 276, 20, 98, 234, 237, 199, 56, 384, 92, 240, 89, 77, 211, 285, 282, 142, 34, 110, 46, 239}, new int[]{106, 75, 159, 186, 303, 328, 219, 285, 299, 155, 160, 314, 48, 389, 150, 243, 240, 330, 272, 128, 169, 156, 200, 375, 40}));
    ExampleRunner.eq(77, 383, new TimeTravellingCellar().determineProfit(new int[]{277, 313, 69, 382, 154, 104, 284, 225, 258, 265, 127, 381, 83, 11, 79, 33, 166, 388, 76, 351, 334, 114, 386, 63, 181}, new int[]{309, 227, 332, 108, 398, 367, 381, 110, 36, 162, 259, 331, 241, 83, 384, 105, 5, 364, 183, 11, 42, 11, 369, 225, 279}));
    ExampleRunner.eq(78, 980, new TimeTravellingCellar().determineProfit(new int[]{907, 866, 506, 916, 562, 117, 226, 214, 129, 571, 632, 156, 819, 994, 491, 266, 172, 290, 190, 54, 229, 313, 709, 64, 435}, new int[]{681, 383, 725, 604, 985, 966, 480, 821, 387, 311, 352, 440, 527, 502, 506, 14, 103, 652, 823, 66, 112, 1025, 175, 338, 185}));
    ExampleRunner.eq(79, 895, new TimeTravellingCellar().determineProfit(new int[]{219, 557, 434, 864, 611, 805, 514, 930, 445, 87, 830, 380, 557, 620, 704, 805, 909, 59, 301, 380, 555, 305, 474, 122, 44}, new int[]{476, 170, 38, 641, 498, 159, 796, 24, 583, 630, 571, 304, 113, 416, 739, 137, 216, 35, 630, 826, 729, 404, 704, 778, 696}));
    ExampleRunner.eq(80, 4736, new TimeTravellingCellar().determineProfit(new int[]{3609, 520, 1397, 4425, 3151, 2188, 2621, 3694, 4816, 180, 1419, 1116, 2749, 4963, 2066, 2031, 1396, 1075, 2916, 4496, 1955, 1826, 2432, 638, 945}, new int[]{3389, 865, 4735, 2901, 2246, 3499, 3734, 4891, 4796, 3158, 365, 4209, 3003, 3959, 4024, 3083, 378, 2364, 3057, 2565, 4330, 2312, 1185, 2629, 227}));
    ExampleRunner.eq(81, 4071, new TimeTravellingCellar().determineProfit(new int[]{680, 1809, 4178, 3012, 2347, 123, 1401, 3113, 2082, 1526, 2583, 580, 259, 2473, 2600, 641, 2738, 1808, 868, 3922, 3056, 3852, 1524, 420, 1908}, new int[]{3989, 1974, 4120, 173, 1828, 1572, 754, 3537, 749, 990, 883, 2997, 4516, 3896, 2303, 3266, 1478, 107, 749, 1175, 2608, 1290, 1138, 1640, 2059}));
    ExampleRunner.eq(82, 434, new TimeTravellingCellar().determineProfit(new int[]{1477, 1304, 1349, 1009, 1466, 1052, 1427, 1408, 1141, 1279, 1059, 1160, 1314, 1167, 1037, 1273, 1480, 1185, 1302, 1388, 1494, 1174, 1062, 1346, 1285}, new int[]{1399, 1139, 1270, 1471, 1115, 1320, 1065, 1371, 1285, 1117, 1297, 1439, 1093, 1185, 1218, 1400, 1091, 1278, 1313, 1128, 1050, 1292, 1060, 1088, 1340}));
    ExampleRunner.eq(83, 374, new TimeTravellingCellar().determineProfit(new int[]{1194, 1081, 1261, 1002, 1173, 1045, 1401, 1313, 1061, 1117, 1174, 1127, 1182, 1045, 1158, 1299, 1088, 1097, 1139, 1019, 1315, 1285, 1358, 1339, 1097}, new int[]{1486, 1390, 1135, 1292, 1224, 1222, 1486, 1051, 1483, 1489, 1224, 1027, 1135, 1283, 1336, 1253, 1458, 1463, 1181, 1249, 1121, 1481, 1083, 1218, 1366}));
    ExampleRunner.eq(84, 47, new TimeTravellingCellar().determineProfit(new int[]{5002, 5021, 5046, 5009, 5038, 5007, 5013, 5042, 5039, 5049, 5030, 5048, 5041, 5027, 5025, 5012, 5029, 5044, 5020, 5001, 5006, 5023, 5010, 5045, 5008}, new int[]{5012, 5018, 5003, 5046, 5002, 5015, 5040, 5007, 5041, 5013, 5037, 5039, 5017, 5030, 5029, 5011, 5031, 5009, 5010, 5004, 5020, 5005, 5027, 5042, 5036}));
    ExampleRunner.eq(85, 49, new TimeTravellingCellar().determineProfit(new int[]{5022, 5007, 5012, 5036, 5014, 5028, 5049, 5025, 5041, 5002, 5013, 5027, 5042, 5004, 5007, 5020, 5040, 5038, 5004, 5025, 5016, 5049, 5004, 5047, 5002}, new int[]{5031, 5035, 5017, 5000, 5000, 5002, 5047, 5007, 5039, 5033, 5046, 5016, 5031, 5046, 5031, 5007, 5008, 5008, 5050, 5038, 5015, 5044, 5001, 5027, 5048}));
    ExampleRunner.eq(86, 968, new TimeTravellingCellar().determineProfit(new int[]{9813, 9637, 9545, 9745, 9241, 9329, 9000, 9773, 9847, 9159, 9899, 9388, 9102, 9173, 9665, 9633, 9922, 9162, 9779, 9629, 9082, 9260, 9645, 9998, 9109}, new int[]{9996, 9921, 9607, 9054, 9165, 9421, 9691, 9062, 9518, 9284, 9392, 9057, 9591, 9030, 9957, 9980, 9484, 9130, 9997, 9117, 9404, 9511, 9896, 9386, 9945}));
    ExampleRunner.eq(87, 990, new TimeTravellingCellar().determineProfit(new int[]{9508, 9126, 9590, 9506, 9587, 9938, 9428, 9194, 9993, 9945, 9967, 9684, 9007, 9486, 9321, 9399, 9004, 9378, 9991, 9386, 9335, 9323, 9870, 9817, 9320}, new int[]{9987, 9574, 9183, 9236, 9312, 9129, 9744, 9438, 9071, 9251, 9377, 9010, 9031, 9923, 9003, 9976, 9891, 9039, 9983, 9729, 9360, 9735, 9085, 9739, 9078}));
    ExampleRunner.eq(88, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 1}, new int[]{1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2}));
    ExampleRunner.eq(89, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 9999, 9999, 9999, 9999, 9999, 10000, 10000, 10000}, new int[]{10000, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 9999, 9999, 9999, 10000, 10000, 9999, 9999, 9999, 10000, 10000, 10000, 9999, 10000}));
    ExampleRunner.eq(90, 49, new TimeTravellingCellar().determineProfit(new int[]{50, 9, 13, 39, 42, 46, 45, 24, 23, 44, 32, 27, 18, 19, 31, 36, 5, 20, 28, 48, 26, 12, 41, 16, 21}, new int[]{47, 13, 15, 44, 36, 29, 17, 32, 12, 10, 24, 7, 14, 28, 11, 8, 33, 49, 39, 4, 35, 2, 19, 1, 6}));
    ExampleRunner.eq(91, 48, new TimeTravellingCellar().determineProfit(new int[]{29, 15, 37, 40, 26, 49, 13, 6, 27, 21, 22, 6, 31, 7, 13, 16, 39, 21, 28, 32, 20, 16, 46, 25, 22}, new int[]{32, 26, 40, 32, 24, 45, 10, 39, 34, 1, 16, 32, 15, 22, 10, 36, 45, 15, 18, 1, 30, 33, 39, 50, 12}));
    ExampleRunner.eq(92, 9, new TimeTravellingCellar().determineProfit(new int[]{2, 9, 8, 9, 3, 1, 10, 10, 10, 3, 4, 6, 4, 4, 9, 4, 9, 2, 10, 2, 1, 5, 6, 8, 5}, new int[]{8, 7, 7, 8, 6, 9, 9, 7, 8, 9, 9, 8, 8, 1, 9, 2, 4, 4, 5, 7, 5, 8, 7, 8, 10}));
    ExampleRunner.eq(93, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2}, new int[]{1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1}));
    ExampleRunner.eq(94, 8, new TimeTravellingCellar().determineProfit(new int[]{4, 5, 2, 2, 4, 10, 6, 4, 10, 3, 5, 9, 6, 5, 7, 7, 2, 4, 9, 2, 4, 4, 6, 5, 7, 4, 4, 3, 10, 5, 7, 3, 8, 5, 10, 9, 4, 5, 2, 10, 4, 5, 8, 6, 6, 2, 9, 4, 5, 7}, new int[]{4, 7, 9, 9, 10, 3, 2, 10, 3, 8, 4, 6, 7, 9, 9, 6, 7, 9, 7, 7, 6, 9, 8, 10, 2, 10, 8, 9, 4, 2, 3, 4, 6, 2, 9, 3, 10, 8, 10, 9, 5, 10, 2, 2, 8, 7, 6, 2, 5, 3}));
    ExampleRunner.eq(95, 394, new TimeTravellingCellar().determineProfit(new int[]{116, 226, 74, 147, 115, 39, 381, 275, 399, 244, 338, 23, 377, 31, 248, 73, 382, 112, 202, 262, 67, 362, 125, 181, 348, 56, 373, 64, 78, 46, 206, 188, 276, 258, 388, 20, 257, 231, 354, 207, 180, 318, 144, 299, 51, 245, 357, 114, 7, 81}, new int[]{90, 340, 224, 337, 312, 283, 210, 153, 285, 394, 29, 266, 51, 16, 82, 303, 242, 35, 374, 244, 10, 291, 383, 53, 386, 230, 93, 342, 139, 95, 218, 34, 41, 356, 141, 120, 166, 290, 200, 355, 314, 261, 5, 125, 338, 104, 362, 168, 273, 173}));
    ExampleRunner.eq(96, 374, new TimeTravellingCellar().determineProfit(new int[]{359, 183, 21, 344, 12, 110, 85, 146, 200, 98, 165, 30, 331, 317, 362, 50, 82, 251, 45, 232, 360, 301, 32, 84, 239, 327, 241, 202, 199, 41, 371, 158, 220, 387, 297, 27, 292, 378, 169, 92, 271, 129, 313, 201, 45, 274, 246, 318, 321, 86}, new int[]{149, 80, 383, 177, 356, 21, 299, 196, 218, 98, 33, 384, 251, 248, 171, 343, 270, 62, 120, 234, 345, 387, 359, 57, 187, 399, 127, 229, 317, 47, 310, 261, 318, 92, 233, 273, 108, 132, 265, 122, 225, 293, 105, 271, 336, 71, 13, 205, 129, 129}));
    ExampleRunner.eq(97, 996, new TimeTravellingCellar().determineProfit(new int[]{289, 955, 660, 422, 1008, 888, 718, 33, 205, 740, 674, 326, 344, 729, 332, 132, 676, 714, 932, 929, 754, 609, 459, 564, 847, 70, 939, 626, 465, 598, 968, 690, 522, 543, 81, 499, 400, 790, 542, 111, 858, 779, 831, 105, 902, 809, 749, 266, 478, 274}, new int[]{715, 12, 90, 721, 887, 652, 155, 454, 535, 836, 966, 47, 853, 435, 384, 558, 893, 862, 27, 995, 635, 742, 741, 730, 613, 132, 455, 278, 334, 923, 542, 18, 871, 568, 675, 727, 190, 820, 150, 661, 571, 86, 645, 394, 457, 1019, 942, 265, 796, 905}));
    ExampleRunner.eq(98, 955, new TimeTravellingCellar().determineProfit(new int[]{229, 400, 563, 906, 45, 91, 974, 436, 359, 277, 329, 891, 231, 115, 429, 896, 833, 555, 632, 973, 185, 118, 995, 766, 448, 367, 700, 306, 623, 465, 126, 788, 801, 679, 664, 783, 761, 553, 188, 89, 821, 453, 917, 988, 559, 261, 800, 361, 752, 347}, new int[]{249, 873, 455, 214, 609, 840, 517, 278, 115, 109, 734, 231, 888, 450, 901, 467, 202, 577, 1010, 381, 656, 746, 824, 488, 704, 352, 739, 419, 703, 406, 756, 943, 249, 126, 72, 848, 956, 579, 95, 40, 679, 765, 208, 482, 185, 78, 939, 377, 645, 864}));
    ExampleRunner.eq(99, 4814, new TimeTravellingCellar().determineProfit(new int[]{257, 2906, 1332, 3862, 4010, 2340, 2557, 348, 4993, 3059, 1518, 3410, 3304, 1822, 4356, 3764, 2801, 3198, 3001, 3527, 3479, 1504, 3713, 2688, 1094, 2684, 1559, 4733, 4259, 155, 548, 1741, 286, 4005, 602, 4196, 1344, 1768, 3561, 3342, 3186, 4195, 1645, 2232, 3550, 2633, 4933, 3972, 634, 784}, new int[]{2451, 4263, 1721, 2363, 357, 4305, 1147, 2314, 887, 3427, 4987, 2528, 937, 3991, 3030, 2357, 334, 3314, 4026, 1119, 1655, 2211, 313, 3201, 1668, 3764, 833, 1600, 2735, 3592, 4509, 2410, 179, 1229, 1998, 436, 533, 3045, 4875, 1321, 3696, 4862, 1073, 4534, 3852, 4004, 4115, 1411, 2317, 3140}));
    ExampleRunner.eq(100, 4692, new TimeTravellingCellar().determineProfit(new int[]{2430, 1196, 2576, 2644, 4297, 4144, 1407, 2355, 2968, 4042, 3171, 2477, 3677, 3250, 3606, 674, 910, 1364, 3619, 785, 4810, 4539, 646, 882, 1396, 1722, 4786, 511, 3033, 4327, 3551, 463, 523, 1126, 331, 2044, 2494, 1638, 1623, 462, 2904, 4695, 163, 1580, 2944, 3669, 4379, 3755, 2257, 2997}, new int[]{1764, 2066, 4761, 2310, 2849, 1156, 1256, 4859, 1567, 4190, 4186, 118, 1877, 1933, 3369, 4333, 1201, 3088, 970, 2725, 3450, 1098, 2419, 837, 4804, 2587, 4406, 4182, 3566, 3888, 4404, 329, 953, 4164, 4764, 3702, 2544, 1020, 885, 4012, 2434, 4971, 1354, 1535, 4128, 4623, 867, 328, 4935, 3962}));
    ExampleRunner.eq(101, 477, new TimeTravellingCellar().determineProfit(new int[]{1346, 1083, 1368, 1122, 1160, 1309, 1103, 1087, 1325, 1209, 1152, 1141, 1260, 1411, 1303, 1298, 1350, 1417, 1479, 1125, 1078, 1429, 1159, 1219, 1391, 1013, 1133, 1430, 1170, 1130, 1263, 1461, 1028, 1385, 1120, 1234, 1454, 1408, 1444, 1105, 1295, 1203, 1016, 1344, 1000, 1112, 1007, 1226, 1237, 1085}, new int[]{1401, 1142, 1051, 1292, 1155, 1184, 1468, 1071, 1060, 1128, 1334, 1020, 1403, 1219, 1141, 1232, 1199, 1341, 1140, 1447, 1181, 1091, 1209, 1272, 1339, 1067, 1279, 1064, 1304, 1364, 1465, 1446, 1415, 1002, 1347, 1345, 1471, 1164, 1406, 1245, 1426, 1494, 1210, 1313, 1225, 1409, 1154, 1111, 1293, 1302}));
    ExampleRunner.eq(102, 486, new TimeTravellingCellar().determineProfit(new int[]{1311, 1227, 1369, 1089, 1037, 1419, 1199, 1249, 1110, 1361, 1251, 1457, 1205, 1468, 1367, 1357, 1058, 1111, 1029, 1051, 1321, 1088, 1277, 1230, 1489, 1388, 1027, 1335, 1427, 1416, 1383, 1237, 1143, 1251, 1326, 1180, 1169, 1272, 1429, 1025, 1132, 1427, 1228, 1083, 1140, 1095, 1441, 1199, 1206, 1216}, new int[]{1250, 1274, 1304, 1026, 1250, 1293, 1415, 1277, 1374, 1341, 1192, 1257, 1078, 1081, 1007, 1150, 1262, 1424, 1422, 1437, 1449, 1300, 1363, 1177, 1130, 1003, 1018, 1317, 1449, 1224, 1032, 1198, 1244, 1336, 1225, 1494, 1375, 1386, 1016, 1249, 1473, 1456, 1005, 1050, 1036, 1012, 1448, 1044, 1182, 1115}));
    ExampleRunner.eq(103, 50, new TimeTravellingCellar().determineProfit(new int[]{5032, 5003, 5045, 5027, 5042, 5007, 5022, 5015, 5030, 5020, 5011, 5018, 5005, 5040, 5025, 5014, 5008, 5013, 5037, 5000, 5047, 5031, 5002, 5034, 5016, 5050, 5048, 5039, 5024, 5004, 5033, 5044, 5026, 5046, 5019, 5010, 5012, 5035, 5041, 5038, 5006, 5036, 5023, 5021, 5001, 5017, 5028, 5049, 5029, 5009}, new int[]{5005, 5009, 5044, 5031, 5045, 5026, 5002, 5000, 5036, 5022, 5012, 5043, 5014, 5018, 5004, 5027, 5037, 5020, 5048, 5041, 5046, 5049, 5024, 5029, 5040, 5006, 5050, 5042, 5016, 5034, 5039, 5015, 5001, 5047, 5010, 5028, 5032, 5035, 5030, 5007, 5011, 5023, 5019, 5017, 5025, 5013, 5038, 5033, 5003, 5021}));
    ExampleRunner.eq(104, 48, new TimeTravellingCellar().determineProfit(new int[]{5022, 5048, 5004, 5011, 5015, 5019, 5012, 5035, 5031, 5023, 5027, 5014, 5015, 5032, 5017, 5002, 5034, 5048, 5033, 5039, 5005, 5031, 5018, 5037, 5026, 5022, 5006, 5009, 5033, 5034, 5005, 5004, 5031, 5034, 5015, 5047, 5028, 5001, 5005, 5008, 5025, 5006, 5022, 5014, 5038, 5039, 5016, 5047, 5011, 5024}, new int[]{5035, 5041, 5029, 5027, 5027, 5004, 5023, 5007, 5039, 5005, 5042, 5018, 5034, 5022, 5001, 5024, 5043, 5003, 5050, 5022, 5011, 5024, 5029, 5008, 5012, 5041, 5021, 5003, 5037, 5006, 5027, 5047, 5047, 5030, 5048, 5049, 5009, 5021, 5005, 5048, 5000, 5021, 5040, 5009, 5018, 5015, 5033, 5010, 5019, 5032}));
    ExampleRunner.eq(105, 969, new TimeTravellingCellar().determineProfit(new int[]{9766, 9546, 9977, 9603, 9919, 9190, 9039, 9503, 9672, 9635, 9915, 9588, 9292, 9236, 9139, 9275, 9264, 9567, 9820, 9925, 9271, 9176, 9291, 9385, 9100, 9065, 9411, 9921, 9935, 9466, 9469, 9701, 9365, 9446, 9656, 9284, 9989, 9048, 9013, 9683, 9055, 9954, 9327, 9643, 9093, 9907, 9012, 9775, 9184, 9303}, new int[]{9475, 9020, 9403, 9540, 9783, 9324, 9828, 9602, 9793, 9529, 9967, 9592, 9538, 9251, 9581, 9586, 9391, 9946, 9621, 9798, 9900, 9948, 9441, 9993, 9902, 9700, 9357, 9029, 9236, 9344, 9332, 9712, 9716, 9087, 9604, 9500, 9763, 9432, 9102, 9557, 9314, 9069, 9501, 9204, 9672, 9434, 9790, 9415, 9380, 9565}));
    ExampleRunner.eq(106, 995, new TimeTravellingCellar().determineProfit(new int[]{9281, 9711, 9358, 9626, 9965, 9058, 9336, 9995, 9295, 9680, 9679, 9359, 9397, 9767, 9963, 9249, 9530, 9748, 9703, 9439, 9414, 9772, 9940, 9618, 9796, 9374, 9760, 9212, 9755, 9523, 9777, 9388, 9586, 9136, 9014, 9551, 9546, 9350, 9898, 9841, 9031, 9930, 9552, 9780, 9697, 9868, 9381, 9579, 9616, 9084}, new int[]{9019, 9382, 9208, 9311, 9000, 9004, 9038, 9112, 9568, 9145, 9635, 9346, 9533, 9221, 9834, 9547, 9124, 9380, 9898, 9375, 9574, 9281, 9305, 9478, 9413, 9354, 9346, 9146, 9933, 9314, 9230, 9304, 9696, 9790, 9968, 9048, 9794, 9006, 9160, 9363, 9151, 9795, 9061, 9036, 9368, 9895, 9583, 9845, 9627, 9833}));
    ExampleRunner.eq(107, 1, new TimeTravellingCellar().determineProfit(new int[]{1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2}, new int[]{2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1}));
    ExampleRunner.eq(108, 1, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 9999, 10000, 9999, 9999, 9999, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 10000, 9999, 10000, 10000, 9999, 9999, 9999, 10000}, new int[]{10000, 9999, 9999, 9999, 9999, 10000, 10000, 10000, 10000, 9999, 10000, 10000, 10000, 10000, 9999, 10000, 9999, 9999, 10000, 9999, 10000, 9999, 9999, 9999, 9999, 10000, 10000, 9999, 10000, 10000, 10000, 9999, 9999, 10000, 9999, 9999, 10000, 10000, 10000, 9999, 10000, 9999, 9999, 10000, 10000, 9999, 9999, 10000, 10000, 10000}));
    ExampleRunner.eq(109, 49, new TimeTravellingCellar().determineProfit(new int[]{18, 41, 8, 15, 40, 10, 29, 26, 2, 1, 45, 31, 5, 34, 38, 16, 44, 13, 12, 37, 25, 30, 27, 21, 39, 50, 14, 11, 23, 6, 24, 7, 48, 3, 22, 32, 43, 9, 4, 19, 33, 35, 17, 47, 49, 28, 46, 20, 42, 36}, new int[]{41, 29, 50, 24, 19, 3, 34, 30, 20, 5, 23, 16, 10, 1, 9, 8, 21, 36, 14, 13, 26, 12, 15, 49, 33, 17, 38, 48, 42, 6, 47, 18, 11, 46, 32, 45, 27, 7, 39, 40, 2, 35, 25, 28, 4, 44, 31, 37, 43, 22}));
    ExampleRunner.eq(110, 46, new TimeTravellingCellar().determineProfit(new int[]{15, 16, 6, 15, 16, 21, 47, 14, 30, 7, 42, 25, 15, 27, 34, 14, 27, 43, 8, 34, 36, 34, 32, 29, 33, 3, 27, 43, 1, 38, 14, 17, 5, 21, 33, 22, 41, 29, 38, 21, 36, 29, 45, 2, 8, 30, 18, 34, 25, 25}, new int[]{19, 12, 9, 1, 40, 41, 5, 16, 35, 7, 5, 48, 23, 9, 20, 5, 33, 11, 36, 20, 33, 23, 48, 29, 24, 7, 9, 41, 42, 35, 16, 11, 46, 26, 11, 37, 16, 17, 4, 50, 23, 9, 49, 47, 19, 18, 3, 1, 30, 38}));
    ExampleRunner.eq(111, 9, new TimeTravellingCellar().determineProfit(new int[]{10, 2, 10, 10, 3, 4, 6, 3, 4, 8, 7, 1, 10, 2, 6, 2, 10, 3, 8, 3, 2, 10, 1, 2, 6, 10, 2, 8, 2, 1, 8, 2, 5, 7, 3, 7, 2, 10, 1, 8, 7, 7, 8, 8, 10, 4, 9, 9, 6, 6}, new int[]{1, 10, 5, 4, 3, 2, 5, 4, 2, 6, 5, 9, 9, 1, 5, 1, 9, 9, 1, 9, 6, 9, 5, 3, 9, 6, 8, 7, 4, 4, 3, 6, 5, 9, 9, 7, 1, 3, 1, 2, 1, 7, 2, 9, 9, 6, 2, 7, 4, 4}));
    ExampleRunner.eq(112, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2}, new int[]{1, 1}));
    ExampleRunner.eq(113, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(114, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(115, 1, new TimeTravellingCellar().determineProfit(new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(116, 99, new TimeTravellingCellar().determineProfit(new int[]{100, 100}, new int[]{1, 1}));
    ExampleRunner.eq(117, 99, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(118, 99, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(119, 99, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(120, 999, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000}, new int[]{1, 1}));
    ExampleRunner.eq(121, 999, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(122, 999, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(123, 999, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(124, 9998, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999}, new int[]{1, 1}));
    ExampleRunner.eq(125, 9998, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(126, 9998, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(127, 9998, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(128, 9999, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{1, 1}));
    ExampleRunner.eq(129, 9999, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(130, 9999, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(131, 9999, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}));
    ExampleRunner.eq(132, 98, new TimeTravellingCellar().determineProfit(new int[]{100, 100}, new int[]{2, 2}));
    ExampleRunner.eq(133, 98, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(134, 98, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(135, 98, new TimeTravellingCellar().determineProfit(new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(136, 998, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000}, new int[]{2, 2}));
    ExampleRunner.eq(137, 998, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(138, 998, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(139, 998, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(140, 9997, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999}, new int[]{2, 2}));
    ExampleRunner.eq(141, 9997, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(142, 9997, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(143, 9997, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(144, 9998, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{2, 2}));
    ExampleRunner.eq(145, 9998, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(146, 9998, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(147, 9998, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}));
    ExampleRunner.eq(148, 900, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000}, new int[]{100, 100}));
    ExampleRunner.eq(149, 900, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(150, 900, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(151, 900, new TimeTravellingCellar().determineProfit(new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(152, 9899, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999}, new int[]{100, 100}));
    ExampleRunner.eq(153, 9899, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(154, 9899, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(155, 9899, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(156, 9900, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{100, 100}));
    ExampleRunner.eq(157, 9900, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(158, 9900, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(159, 9900, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100}));
    ExampleRunner.eq(160, 8999, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999}, new int[]{1000, 1000}));
    ExampleRunner.eq(161, 8999, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(162, 8999, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(163, 8999, new TimeTravellingCellar().determineProfit(new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(164, 9000, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{1000, 1000}));
    ExampleRunner.eq(165, 9000, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(166, 9000, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(167, 9000, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000}));
    ExampleRunner.eq(168, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000}, new int[]{9999, 9999}));
    ExampleRunner.eq(169, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}));
    ExampleRunner.eq(170, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}));
    ExampleRunner.eq(171, 1, new TimeTravellingCellar().determineProfit(new int[]{10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000}, new int[]{9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999}));
    ExampleRunner.eq(172, 3312, new TimeTravellingCellar().determineProfit(new int[]{5417, 4299}, new int[]{4600, 2105}));
    ExampleRunner.eq(173, 1333, new TimeTravellingCellar().determineProfit(new int[]{8992, 6589, 8643}, new int[]{7469, 7659, 7965}));
    ExampleRunner.eq(174, 2453, new TimeTravellingCellar().determineProfit(new int[]{5624, 4717, 3393, 3991, 3291, 3700, 3254, 3264, 4859, 2321, 5903, 4358, 6258, 4522, 5445, 5566, 2349, 3552, 4032, 2646, 3320, 4829, 2894, 2283, 4394, 5007, 4885, 2487, 5470, 4642, 2825, 3665, 3088, 4097, 5535, 3101, 4519, 2517, 4244, 6100, 5711, 2718, 3030, 5697, 5119, 2203, 3834, 4191, 2477, 5745}, new int[]{3875, 3899, 6412, 5485, 4063, 6304, 4994, 4516, 4323, 5150, 5259, 4945, 5699, 5422, 5281, 3973, 3805, 5678, 5722, 5767, 5245, 4472, 5298, 4075, 3825, 4243, 4319, 4510, 6484, 5815, 3887, 4512, 5923, 4452, 6207, 4140, 4129, 5354, 4865, 4662, 3877, 4277, 6596, 5785, 5908, 5250, 3912, 3866, 5081, 5843}));
    ExampleRunner.eq(175, 4582, new TimeTravellingCellar().determineProfit(new int[]{9490, 9652, 9704, 9221, 9232, 9442, 9095, 9712, 9161, 9478, 9677, 8633, 9185, 9311, 9370, 9185, 8982, 8853, 8886, 9289, 9549, 8737, 8933, 9042, 8845, 8841, 8718, 9367, 8812, 9430, 9188, 9674, 9355, 9289, 9168, 8984, 9004, 9634, 9093, 9537, 9385, 9167, 9541, 8967, 8876, 9309, 9524, 9229, 9657, 8683}, new int[]{7683, 6005, 7106, 5305, 7713, 5891, 5452, 6918, 6240, 6338, 7044, 6050, 5151, 6518, 5586, 6932, 5935, 6006, 7359, 6947, 5778, 6017, 6972, 5564, 6373, 6418, 7333, 5403, 6819, 5398, 6879, 6647, 5130, 6131, 5679, 7715, 5749, 6003, 5634, 5717, 7213, 7550, 5494, 6091, 7795, 5952, 6750, 5876, 5686, 6255}));
    ExampleRunner.eq(176, 8165, new TimeTravellingCellar().determineProfit(new int[]{9779, 9792, 9820, 9657, 9659, 9831, 9819, 9719, 9607, 9908, 9880, 9898, 9770, 9784, 9700, 9902, 9888, 9864, 9641, 9901, 9895, 9814, 9897, 9676, 9934, 9828, 9893, 9739, 9742, 9681, 9688, 9927, 9750, 9913, 9861, 9814, 9681, 9618, 9599, 9905, 9931, 9884, 9868, 9638, 9605, 9845, 9606, 9770, 9774, 9652}, new int[]{2113, 2667, 2028, 2568, 2235, 1943, 2639, 2613, 2099, 2240, 2494, 2452, 2479, 1838, 2604, 2383, 2469, 2670, 1967, 2332, 2698, 1964, 2233, 1785, 1766, 2339, 2239, 2386, 1878, 1963, 2228, 2234, 1900, 1854, 2399, 2378, 2367, 2308, 2588, 2063, 2146, 2352, 2113, 2222, 2434, 2314, 1875, 2173, 2255, 2085}));
    ExampleRunner.eq(177, 4878, new TimeTravellingCellar().determineProfit(new int[]{9366, 9676, 4596, 4858, 8637, 6459, 6624, 5329, 5570, 7908, 4414, 5646, 8407, 9278, 5265, 9554, 8361, 6863, 9648, 6279, 5218, 5492, 6229, 7582, 8581, 6065, 8388, 5759, 5971, 8145, 8672, 7704, 4859, 5635, 8157, 9092, 4461, 7149, 6788, 5627, 7424, 8898, 6868, 6097, 8442, 7728, 8018, 7069, 6959}, new int[]{6010, 6214, 6334, 6644, 6184, 5605, 6555, 5645, 4925, 5887, 4798, 6430, 5747, 5347, 6154, 5325, 5749, 6575, 6669, 6170, 6394, 5982, 5346, 5297, 5361, 6673, 4908, 5287, 5900, 5090, 6448, 5010, 6362, 6038, 6713, 5802, 6701, 6524, 6661, 6685, 5511, 6517, 6371, 6317, 5120, 5781, 6700, 5928, 5613}));
    ExampleRunner.eq(178, 4423, new TimeTravellingCellar().determineProfit(new int[]{9215, 9301}, new int[]{4878, 5385}));
    ExampleRunner.eq(179, 6753, new TimeTravellingCellar().determineProfit(new int[]{8095, 8348, 8604}, new int[]{1924, 2090, 1595}));
    ExampleRunner.eq(180, 7272, new TimeTravellingCellar().determineProfit(new int[]{7807, 3788, 3710, 4828, 8267, 4217, 8933, 8596, 8876, 8953, 8041, 8213, 6448, 4829, 4481, 6162, 5810, 3805, 9474, 4454, 5692, 9345, 6151, 5600, 8100, 5029, 6919, 7393, 6648, 5139, 8193, 4898, 5404, 7231, 6203, 4115, 7925, 4430, 8038, 6095, 8710, 6523, 3601, 4451, 6679, 9443, 7091, 8966, 3691, 5858}, new int[]{3671, 4241, 2945, 4891, 5529, 3028, 2470, 6195, 5489, 6533, 2694, 6793, 4562, 3706, 3505, 5044, 6954, 3984, 5574, 2309, 4961, 5745, 2264, 6293, 6451, 2932, 5187, 3261, 5602, 2704, 4212, 5917, 3588, 3800, 3682, 5761, 3471, 2795, 4830, 6801, 2202, 5365, 6468, 3408, 5714, 6616, 5095, 4344, 3475, 3543}));
    ExampleRunner.eq(181, 6797, new TimeTravellingCellar().determineProfit(new int[]{7796, 6044, 5835, 7536, 6979, 6846, 6174, 7897, 7166, 6602, 6258, 6781, 7151, 6525, 7984, 6807, 7777, 6047, 6895, 7215, 7871, 7283, 6408, 6076, 6366, 7795, 6650, 7574, 7772, 7277, 6608, 6453, 7632, 5691, 7237, 7859, 5785, 7723, 7705, 7262, 6273, 7211, 5992, 6673, 8047, 5924, 7791, 7773, 7582, 6634}, new int[]{5479, 4784, 2527, 2696, 3634, 1711, 2943, 7874, 4161, 7032, 3894, 3466, 1748, 3768, 6815, 7017, 3696, 6167, 2757, 6277, 5824, 1782, 3588, 4497, 6565, 5362, 7513, 1899, 3705, 6959, 4771, 1250, 1616, 6102, 7295, 4053, 4424, 2303, 1801, 7389, 1400, 2306, 2920, 6497, 4877, 6346, 3387, 5185, 4579, 4948}));
    ExampleRunner.eq(182, 7393, new TimeTravellingCellar().determineProfit(new int[]{8135, 8220, 8305, 8287, 8230, 8167, 8055, 8378, 8092, 8364, 8301, 8358, 8374, 8145, 8250, 8120, 8419, 8343, 8060, 8022, 8033, 8102, 8174, 8248, 8256, 8020, 8163, 8039, 8155, 8303, 8294, 8036, 8091, 8345, 8305, 8303, 8259, 8106, 8427, 8333, 8216, 8297, 8024, 8158, 8188, 8256, 8025, 8175, 8168, 8067}, new int[]{2830, 1742, 7840, 7880, 6382, 2771, 5074, 5029, 7884, 4127, 9882, 5830, 5241, 7931, 1034, 4888, 1252, 9379, 2916, 8740, 2334, 4618, 9211, 1286, 6323, 7007, 3541, 1608, 1796, 1923, 1849, 3873, 2940, 8936, 1795, 8570, 1776, 6144, 3668, 8907, 9547, 3592, 4807, 4829, 1564, 5116, 8965, 2092, 4536, 1922}));
    ExampleRunner.eq(183, 815, new TimeTravellingCellar().determineProfit(new int[]{4986, 5402, 4434, 4128, 3539, 5410, 4401, 5709, 2937, 4672, 3233, 4387, 3022, 4482, 5758, 3090, 2972, 3609, 4183, 5063, 3652, 5909, 3466, 4176, 2633, 6058, 5899, 4528, 3526, 6179, 3251, 5950, 4802, 5122, 3298, 5778, 3752, 5136, 4707, 4127, 3028, 5378, 5373, 3488, 3658, 4930, 3437, 3489, 5976}, new int[]{6801, 7629, 7578, 6068, 8108, 8085, 7232, 8110, 5364, 7473, 6747, 6808, 7349, 8119, 8496, 5376, 6070, 7856, 8101, 9216, 6661, 5804, 6180, 8355, 8991, 7399, 8700, 8013, 8778, 9406, 7609, 5956, 7412, 7884, 9175, 8217, 6346, 6784, 6704, 6540, 6954, 8282, 6046, 7000, 6778, 9372, 7207, 5546, 5472}));
    ExampleRunner.eq(184, 3510, new TimeTravellingCellar().determineProfit(new int[]{9481, 9621}, new int[]{6111, 6067}));
    ExampleRunner.eq(185, 300, new TimeTravellingCellar().determineProfit(new int[]{6735, 7036, 2089}, new int[]{6736, 7263, 7152}));
    ExampleRunner.eq(186, 4800, new TimeTravellingCellar().determineProfit(new int[]{9037, 8499, 7106, 7949, 7818, 7113, 7380, 8497, 8376, 8977, 8113, 8220, 7695, 8096, 7621, 8591, 8357, 8173, 9020, 8887, 7643, 7435, 8977, 7948, 7117, 7674, 7092, 7941, 8924, 7804, 8063, 8769, 7239, 8146, 7526, 8035, 8364, 8011, 7468, 7676, 7796, 8559, 8873, 8597, 7591, 7430, 7996, 8925, 8580, 7952}, new int[]{5689, 5206, 5066, 4443, 5547, 5501, 6229, 6417, 5786, 4252, 4575, 5323, 5388, 4237, 4403, 5464, 5823, 5762, 6119, 5259, 6061, 5975, 4350, 6077, 4293, 6232, 5603, 5398, 4868, 6012, 5965, 6325, 4776, 4590, 4326, 6091, 5855, 6324, 6070, 5204, 6344, 6410, 6295, 5291, 6415, 4257, 4313, 5796, 5783, 6196}));
    ExampleRunner.eq(187, 4302, new TimeTravellingCellar().determineProfit(new int[]{7073, 7573, 7433, 7288, 7490, 7313, 7410, 7173, 7338, 7113, 7569, 7471, 7098, 7233, 7053, 7267, 7311, 7581, 7467, 7271, 7355, 7461, 7147, 7069, 7327, 7471, 7557, 7222, 7077, 7324, 7314, 7115, 7300, 7380, 7596, 7423, 7096, 7409, 7560, 7398, 7154, 7532, 7502, 7445, 7397, 7519, 7344, 7112, 7171, 7214}, new int[]{4951, 3908, 4420, 4961, 4929, 3653, 3482, 3337, 3906, 4943, 3592, 4182, 4494, 3425, 4955, 4359, 3713, 3595, 4468, 4499, 4252, 4683, 4201, 3662, 4993, 4431, 5167, 3520, 3746, 4642, 4620, 3296, 5326, 3640, 4968, 4854, 4004, 5161, 4902, 4685, 4767, 5269, 3467, 3924, 3294, 5197, 4994, 3782, 3391, 4061}));
    ExampleRunner.eq(188, 3536, new TimeTravellingCellar().determineProfit(new int[]{5380, 6901, 4939, 8901, 5205, 6935, 5742, 6162, 6123, 4348, 7991, 4178, 9008, 6026, 7199, 6482, 6240, 6449, 6242, 5802, 4932, 6529, 5474, 8913, 5585, 5723, 5073, 7797, 4334, 8285, 9542, 5658, 4159, 4918, 4995, 5307, 6333, 6680, 5950, 8400, 5508, 8421, 7058, 8997, 4883, 4693, 5915, 5604, 7086, 8100}, new int[]{6250, 7176, 6642, 7013, 6666, 7028, 6622, 6495, 6579, 6309, 7210, 6006, 7195, 6282, 6144, 7271, 6630, 7139, 6365, 6402, 6011, 6157, 7410, 6659, 6563, 6453, 7305, 7027, 6264, 6640, 7449, 7086, 6288, 7096, 7105, 7526, 6596, 6199, 6494, 6180, 7080, 6709, 6226, 6748, 7030, 6942, 7024, 6665, 6553, 7428}));
    ExampleRunner.eq(189, 6094, new TimeTravellingCellar().determineProfit(new int[]{7413, 7032, 5469, 5359, 6174, 6143, 7564, 6776, 6931, 7676, 5253, 7049, 5544, 6165, 7286, 6831, 5900, 7386, 6565, 7306, 5843, 5310, 7676, 7782, 5314, 6805, 6710, 7526, 7434, 6012, 6324, 7050, 5247, 6700, 7316, 7033, 7750, 7787, 6012, 7588, 7666, 6172, 6841, 6117, 7244, 6330, 5856, 6052, 6623}, new int[]{6387, 3318, 6694, 5424, 4739, 3393, 2750, 7082, 4397, 4273, 5521, 2690, 6860, 4410, 5372, 5991, 7207, 3656, 2422, 5657, 2515, 1879, 7352, 1693, 3097, 7482, 2800, 4749, 5877, 6171, 7105, 4633, 1858, 6168, 5867, 2407, 1929, 4427, 5299, 2136, 7014, 6630, 6582, 3738, 3408, 4323, 5539, 6425, 6293}));
    ExampleRunner.eq(190, 5739, new TimeTravellingCellar().determineProfit(new int[]{7571, 7605}, new int[]{2455, 1832}));
    ExampleRunner.eq(191, 7480, new TimeTravellingCellar().determineProfit(new int[]{8355, 4532, 5421}, new int[]{954, 973, 875}));
    ExampleRunner.eq(192, 5480, new TimeTravellingCellar().determineProfit(new int[]{5219, 5592, 4251, 4635, 5353, 4469, 7301, 5052, 7032, 5130, 6275, 6994, 4779, 6044, 7176, 5227, 5154, 7042, 5750, 5470, 4856, 5754, 4213, 4973, 5863, 4541, 6308, 4406, 6611, 4295, 4288, 4426, 5855, 6296, 6818, 7175, 6732, 5133, 6613, 4778, 4648, 5484, 6157, 7183, 5913, 4347, 5006, 7034, 7356, 5142}, new int[]{4477, 5172, 4208, 7183, 7404, 1876, 6629, 2752, 2121, 2021, 3762, 6907, 6408, 4504, 4163, 2265, 6954, 7152, 2675, 2577, 6528, 7360, 7457, 6445, 6756, 3862, 6113, 5019, 6651, 4969, 2664, 3227, 7103, 3834, 2508, 6605, 3840, 7267, 7488, 2924, 6250, 3348, 6793, 4756, 4814, 3054, 3984, 3866, 7168, 4789}));
    ExampleRunner.eq(193, 5356, new TimeTravellingCellar().determineProfit(new int[]{7217, 7285, 7269, 7474, 7469, 7435, 7354, 7231, 7441, 7454, 7225, 7355, 7248, 7375, 7408, 7398, 7380, 7407, 7445, 7430, 7291, 7233, 7407, 7267, 7307, 7296, 7318, 7305, 7275, 7406, 7446, 7282, 7211, 7236, 7277, 7470, 7423, 7383, 7221, 7384, 7320, 7468, 7221, 7358, 7363, 7419, 7276, 7263, 7309, 7473}, new int[]{3220, 2984, 2794, 2253, 2983, 4998, 4519, 4175, 2919, 2490, 5183, 3554, 5173, 4113, 4446, 2480, 5251, 4253, 5103, 2533, 3792, 2271, 3571, 3003, 2766, 3459, 4411, 5154, 4986, 3250, 4702, 2628, 3904, 5166, 2551, 4558, 4826, 4980, 3395, 2168, 2133, 3241, 3632, 4976, 5024, 2500, 2118, 4937, 4663, 4891}));
    ExampleRunner.eq(194, 6640, new TimeTravellingCellar().determineProfit(new int[]{6104, 7226, 7918, 6637, 8264, 6572, 6391, 6428, 7891, 7479, 7449, 8198, 6127, 7959, 6931, 6475, 6515, 8002, 8276, 8185, 6894, 6466, 8011, 6292, 6139, 6565, 6313, 7496, 7346, 7590, 8296, 7487, 6003, 7889, 7673, 7817, 8010, 8101, 7794, 7088, 6768, 6918, 6474, 6932, 6065, 7442, 6956, 6617, 6631, 6907}, new int[]{4101, 2329, 4201, 3573, 3882, 2702, 3923, 2758, 2487, 1927, 2600, 2506, 1727, 3562, 4208, 3954, 2018, 3025, 2370, 1656, 3195, 2711, 2161, 3552, 2153, 3613, 2311, 4240, 3930, 3405, 3137, 3785, 3390, 2404, 3112, 2338, 3450, 2102, 3440, 3593, 1685, 1794, 1853, 1756, 3013, 3717, 3366, 3375, 2497, 3393}));
    ExampleRunner.eq(195, 4717, new TimeTravellingCellar().determineProfit(new int[]{4508, 5831, 3906, 1797, 6842, 2254, 7010, 7871, 6551, 5678, 5695, 3748, 3216, 7590, 3140, 2430, 2845, 4143, 6191, 4533, 7121, 2206, 6418, 2486, 1331, 3673, 4163, 1571, 2207, 1283, 6838, 3483, 5863, 7512, 2048, 2491, 6535, 7806, 2128, 4852, 3270, 4591, 7348, 3254, 3947, 2254, 4433, 3561, 5145}, new int[]{5494, 3438, 5553, 6508, 5026, 5207, 3423, 6060, 4924, 3154, 7223, 7349, 3678, 4117, 4216, 4601, 6457, 3339, 4160, 4788, 5579, 3470, 5652, 5111, 4385, 3609, 5592, 4953, 7080, 4647, 3705, 5030, 5007, 6180, 4122, 6956, 3843, 4339, 5472, 5689, 4288, 5279, 5494, 4888, 6190, 6633, 6283, 5232, 6894}));
    ExampleRunner.eq(196, 1970, new TimeTravellingCellar().determineProfit(new int[]{5026, 4353}, new int[]{2383, 6865}));
    ExampleRunner.eq(197, 37, new TimeTravellingCellar().determineProfit(new int[]{2123, 4228, 5472}, new int[]{5566, 5435, 6379}));
    ExampleRunner.eq(198, 3852, new TimeTravellingCellar().determineProfit(new int[]{993, 2076, 3361, 2249, 4256, 809, 3484, 1267, 2498, 3913, 1890, 2908, 2449, 1758, 3160, 971, 4269, 2452, 2861, 2722, 1008, 1414, 4224, 2367, 1209, 3636, 1461, 4330, 3139, 1664, 2647, 3330, 2938, 4119, 3689, 2862, 4126, 2841, 3328, 2292, 1334, 3328, 3310, 1893, 3196, 2139, 2062, 3134, 2701, 4121}, new int[]{1012, 5188, 2617, 1182, 4179, 4568, 4302, 2550, 6245, 1617, 4104, 4352, 689, 3786, 2403, 598, 5553, 4085, 4254, 4407, 2299, 6686, 3591, 2062, 3148, 3515, 515, 2580, 2785, 4238, 6456, 1645, 478, 6921, 675, 2505, 4558, 4842, 4920, 1855, 6323, 6872, 6071, 4861, 3727, 1543, 5323, 2348, 3476, 629}));
    ExampleRunner.eq(199, 4442, new TimeTravellingCellar().determineProfit(new int[]{4444, 4111, 6513, 5872, 5955, 5326, 4412, 4270, 5410, 5753, 4142, 4795, 5792, 4826, 6464, 5908, 5475, 5736, 5745, 4705, 4964, 5118, 6685, 4261, 6654, 5643, 4397, 6573, 4882, 5727, 4615, 5247, 5760, 6222, 6214, 4897, 4731, 6547, 4262, 6062, 5482, 4325, 5951, 6368, 5073, 5598, 5458, 6469, 6428, 6297}, new int[]{4360, 2397, 2365, 4171, 2885, 2543, 3141, 4396, 4082, 2820, 2742, 4284, 3776, 2545, 2640, 4199, 4406, 4123, 4465, 3666, 2919, 2271, 3640, 3759, 3815, 2481, 4185, 3440, 3702, 4227, 2762, 3798, 2361, 2946, 3501, 3269, 3308, 4461, 3401, 3127, 3018, 3962, 2943, 2530, 2243, 3402, 2465, 2386, 3262, 2462}));
    ExampleRunner.eq(200, 7444, new TimeTravellingCellar().determineProfit(new int[]{7508, 8081, 7900, 4756, 5204, 6011, 5691, 8110, 6386, 7720, 7888, 6852, 5428, 6194, 5375, 6968, 5751, 7302, 6131, 6809, 7094, 7244, 6907, 6768, 8272, 7177, 7053, 6764, 6922, 8161, 8429, 5936, 5910, 5998, 6090, 6511, 5568, 5340, 6128, 7351, 6619, 7575, 7763, 7444, 5275, 4644, 7971, 8476, 7343, 5608}, new int[]{1616, 4061, 1655, 3896, 4882, 1957, 5126, 3128, 1078, 2127, 3867, 1521, 3727, 2261, 4330, 2803, 5177, 1165, 1032, 1308, 3824, 1661, 3693, 4203, 3432, 4731, 1866, 1710, 3001, 3406, 5304, 3786, 2147, 1723, 2446, 1793, 2849, 2337, 4090, 3097, 3633, 2721, 3787, 2040, 4151, 2881, 4096, 4008, 3215, 4297}));
  }
}
